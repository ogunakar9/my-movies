import type {
  IDetailQueryParameters,
  IFilmDataState,
  IFilmDetailData,
  IFilmState
} from '@/lib/types/film';
import type { PayloadAction } from '@reduxjs/toolkit';

import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { type AppThunk, type RootState } from '../../app/store';

const initialState: IFilmState = {
  query: {
    apikey: import.meta.env.VITE_API_KEY as string,
    s: 'Pokemon',
    y: '',
    type: '',
    page: 1
  },
  status: 'idle',
  filmData: {} as IFilmDataState,
  error: undefined,
  selectedFilm: {} as IFilmDetailData
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const getFilmsWithParams = createAsyncThunk(
//   'films/fetchFilms',
//   async (parameters: IQueryParams) => {
//     // The value we return becomes the `fulfilled` action payload
//     return await fetchFilms(parameters);
//   }
// );

// export const getFilmDetail = createAsyncThunk(
//   'films/fetchFilmDetail',
//   async (parameters: IDetailQueryParameters) => {
//     const apikey = process.env.REACT_APP_API_KEY;
//     // The value we return becomes the `fulfilled` action payload
//     return await fetchFilms({ ...parameters, apikey });
//   }
// );

export const filmSlice = createSlice({
  name: 'films',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateSearchInput: (state, action: PayloadAction<string>) => {
      state.query.s = action.payload;
    },
    updateTypeSelector: (state, action: PayloadAction<string>) => {
      state.query.type = action.payload;
    },
    updateYearSelector: (state, action: PayloadAction<string>) => {
      state.query.y = action.payload;
    },
    updatePage: (state, action: PayloadAction<number>) => {
      state.query.page = action.payload;
    }
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(getFilmsWithParams.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(getFilmsWithParams.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.filmData = action.payload;
  //     })
  //     .addCase(getFilmsWithParams.rejected, (state) => {
  //       state.status = 'failed';
  //     })
  //     .addCase(getFilmDetail.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(getFilmDetail.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.selectedFilm = action.payload;
  //     })
  //     .addCase(getFilmDetail.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // }
});

export const { updateSearchInput, updateTypeSelector, updateYearSelector, updatePage } =
  filmSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectFilters = (state: RootState) => state.films.query;
export const selectSearchTitle = (state: RootState) => state.films.query.s;
export const selectYear = (state: RootState) => state.films.query.y;
export const selectPage = (state: RootState) => state.films.query.page;
export const selectType = (state: RootState) => state.films.query.type;
export const selectStatus = (state: RootState) => state.films.status;
export const selectFilmData = (state: RootState) => state.films.filmData;
export const selectErrors = (state: RootState) => state.films.error;
export const selectFilmsLength = (state: RootState) => state.films.filmData.totalResults;
export const selectFilmsList = (state: RootState) => state.films.filmData.Search;
export const selectSelectedFilm = (state: RootState) => state.films.selectedFilm;

//TODO: refactor this to make page fetch with filter change in same function
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const getNewPage =
//   (page: number): AppThunk =>
//   (dispatch, getState) => {
//     const filters = selectFilters(getState());

//     // dispatch(getFilmsWithParams(filters));
//   };

export default filmSlice.reducer;
// function fetchFilms(argument0: { apikey: string | undefined; i: string }): any {
//   throw new Error('Function not implemented.');
// }
